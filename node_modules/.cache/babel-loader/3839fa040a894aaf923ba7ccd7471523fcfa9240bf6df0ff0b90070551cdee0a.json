{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bm068\\\\Desktop\\\\Earth\\\\src\\\\context\\\\EarthquakeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EarthquakeContext = /*#__PURE__*/createContext(undefined);\nexport const useEarthquakes = () => {\n  _s();\n  const context = useContext(EarthquakeContext);\n  if (context === undefined) {\n    throw new Error('useEarthquakes must be used within an EarthquakeProvider');\n  }\n  return context;\n};\n_s(useEarthquakes, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const EarthquakeProvider = ({\n  children\n}) => {\n  _s2();\n  const [earthquakes, setEarthquakes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedEarthquake, setSelectedEarthquake] = useState(null);\n  const [timeRange, setTimeRange] = useState('day');\n  const [locationFilter, setLocationFilter] = useState('');\n  const [notifications, setNotifications] = useState(false);\n  const getApiUrl = range => {\n    const endpoints = {\n      hour: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson',\n      day: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson',\n      week: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.geojson',\n      month: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson'\n    };\n    return endpoints[range];\n  };\n  const calculateStats = data => {\n    if (data.length === 0) {\n      return {\n        total: 0,\n        byMagnitude: {},\n        averageMagnitude: 0,\n        strongest: null,\n        recent: 0,\n        byRegion: {}\n      };\n    }\n    const now = Date.now();\n    const oneHourAgo = now - 60 * 60 * 1000;\n    const byMagnitude = {};\n    const byRegion = {};\n    let totalMagnitude = 0;\n    let strongest = null;\n    let recent = 0;\n    data.forEach(eq => {\n      var _place$split$pop;\n      // Magnitude grouping\n      const magGroup = eq.properties.mag >= 6 ? '6.0+' : eq.properties.mag >= 4.5 ? '4.5-5.9' : eq.properties.mag >= 3.0 ? '3.0-4.4' : '0-2.9';\n      byMagnitude[magGroup] = (byMagnitude[magGroup] || 0) + 1;\n\n      // Region grouping (extract country from place)\n      const place = eq.properties.place;\n      const region = place.includes(',') ? ((_place$split$pop = place.split(',').pop()) === null || _place$split$pop === void 0 ? void 0 : _place$split$pop.trim()) || 'Unknown' : place;\n      byRegion[region] = (byRegion[region] || 0) + 1;\n\n      // Total magnitude for average\n      totalMagnitude += eq.properties.mag;\n\n      // Strongest earthquake\n      if (!strongest || eq.properties.mag > strongest.properties.mag) {\n        strongest = eq;\n      }\n\n      // Recent earthquakes (last hour)\n      if (eq.properties.time > oneHourAgo) {\n        recent++;\n      }\n    });\n    return {\n      total: data.length,\n      byMagnitude,\n      averageMagnitude: totalMagnitude / data.length,\n      strongest,\n      recent,\n      byRegion\n    };\n  };\n  const fetchEarthquakes = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(getApiUrl(timeRange));\n      if (!response.ok) {\n        throw new Error('Failed to fetch earthquake data');\n      }\n      const data = await response.json();\n      setEarthquakes(data.features || []);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const refreshData = () => {\n    fetchEarthquakes();\n  };\n  useEffect(() => {\n    fetchEarthquakes();\n  }, [timeRange]);\n  const stats = calculateStats(earthquakes);\n  const value = {\n    earthquakes,\n    loading,\n    error,\n    selectedEarthquake,\n    setSelectedEarthquake,\n    refreshData,\n    timeRange,\n    setTimeRange,\n    locationFilter,\n    setLocationFilter,\n    stats,\n    notifications,\n    setNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(EarthquakeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s2(EarthquakeProvider, \"G56XOWUyHhnEu5mKXE2+xjoqXB4=\");\n_c = EarthquakeProvider;\nvar _c;\n$RefreshReg$(_c, \"EarthquakeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","EarthquakeContext","undefined","useEarthquakes","_s","context","Error","EarthquakeProvider","children","_s2","earthquakes","setEarthquakes","loading","setLoading","error","setError","selectedEarthquake","setSelectedEarthquake","timeRange","setTimeRange","locationFilter","setLocationFilter","notifications","setNotifications","getApiUrl","range","endpoints","hour","day","week","month","calculateStats","data","length","total","byMagnitude","averageMagnitude","strongest","recent","byRegion","now","Date","oneHourAgo","totalMagnitude","forEach","eq","_place$split$pop","magGroup","properties","mag","place","region","includes","split","pop","trim","time","fetchEarthquakes","response","fetch","ok","json","features","err","message","refreshData","stats","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/bm068/Desktop/Earth/src/context/EarthquakeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\nexport interface Earthquake {\r\n  id: string;\r\n  properties: {\r\n    mag: number;\r\n    place: string;\r\n    time: number;\r\n    title: string;\r\n    url: string;\r\n  };\r\n  geometry: {\r\n    coordinates: [number, number, number]; // [longitude, latitude, depth]\r\n  };\r\n}\r\n\r\nexport type TimeRange = 'hour' | 'day' | 'week' | 'month';\r\n\r\nexport interface EarthquakeStats {\r\n  total: number;\r\n  byMagnitude: { [key: string]: number };\r\n  averageMagnitude: number;\r\n  strongest: Earthquake | null;\r\n  recent: number;\r\n  byRegion: { [key: string]: number };\r\n}\r\n\r\ninterface EarthquakeContextType {\r\n  earthquakes: Earthquake[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  selectedEarthquake: Earthquake | null;\r\n  setSelectedEarthquake: (earthquake: Earthquake | null) => void;\r\n  refreshData: () => void;\r\n  timeRange: TimeRange;\r\n  setTimeRange: (range: TimeRange) => void;\r\n  locationFilter: string;\r\n  setLocationFilter: (location: string) => void;\r\n  stats: EarthquakeStats;\r\n  notifications: boolean;\r\n  setNotifications: (enabled: boolean) => void;\r\n}\r\n\r\nconst EarthquakeContext = createContext<EarthquakeContextType | undefined>(undefined);\r\n\r\nexport const useEarthquakes = () => {\r\n  const context = useContext(EarthquakeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useEarthquakes must be used within an EarthquakeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface EarthquakeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const EarthquakeProvider: React.FC<EarthquakeProviderProps> = ({ children }) => {\r\n  const [earthquakes, setEarthquakes] = useState<Earthquake[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedEarthquake, setSelectedEarthquake] = useState<Earthquake | null>(null);\r\n  const [timeRange, setTimeRange] = useState<TimeRange>('day');\r\n  const [locationFilter, setLocationFilter] = useState<string>('');\r\n  const [notifications, setNotifications] = useState<boolean>(false);\r\n\r\n  const getApiUrl = (range: TimeRange): string => {\r\n    const endpoints = {\r\n      hour: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson',\r\n      day: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson',\r\n      week: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.geojson',\r\n      month: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson'\r\n    };\r\n    return endpoints[range];\r\n  };\r\n\r\n  const calculateStats = (data: Earthquake[]): EarthquakeStats => {\r\n    if (data.length === 0) {\r\n      return {\r\n        total: 0,\r\n        byMagnitude: {},\r\n        averageMagnitude: 0,\r\n        strongest: null,\r\n        recent: 0,\r\n        byRegion: {}\r\n      };\r\n    }\r\n\r\n    const now = Date.now();\r\n    const oneHourAgo = now - (60 * 60 * 1000);\r\n    \r\n    const byMagnitude: { [key: string]: number } = {};\r\n    const byRegion: { [key: string]: number } = {};\r\n    let totalMagnitude = 0;\r\n    let strongest: Earthquake | null = null;\r\n    let recent = 0;\r\n\r\n    data.forEach(eq => {\r\n      // Magnitude grouping\r\n      const magGroup = eq.properties.mag >= 6 ? '6.0+' : \r\n                      eq.properties.mag >= 4.5 ? '4.5-5.9' :\r\n                      eq.properties.mag >= 3.0 ? '3.0-4.4' : '0-2.9';\r\n      \r\n      byMagnitude[magGroup] = (byMagnitude[magGroup] || 0) + 1;\r\n      \r\n      // Region grouping (extract country from place)\r\n      const place = eq.properties.place;\r\n      const region = place.includes(',') ? place.split(',').pop()?.trim() || 'Unknown' : place;\r\n      byRegion[region] = (byRegion[region] || 0) + 1;\r\n      \r\n      // Total magnitude for average\r\n      totalMagnitude += eq.properties.mag;\r\n      \r\n      // Strongest earthquake\r\n      if (!strongest || eq.properties.mag > strongest.properties.mag) {\r\n        strongest = eq;\r\n      }\r\n      \r\n      // Recent earthquakes (last hour)\r\n      if (eq.properties.time > oneHourAgo) {\r\n        recent++;\r\n      }\r\n    });\r\n\r\n    return {\r\n      total: data.length,\r\n      byMagnitude,\r\n      averageMagnitude: totalMagnitude / data.length,\r\n      strongest,\r\n      recent,\r\n      byRegion\r\n    };\r\n  };\r\n\r\n  const fetchEarthquakes = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await fetch(getApiUrl(timeRange));\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch earthquake data');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setEarthquakes(data.features || []);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'An error occurred');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const refreshData = () => {\r\n    fetchEarthquakes();\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEarthquakes();\r\n  }, [timeRange]);\r\n\r\n  const stats = calculateStats(earthquakes);\r\n\r\n  const value: EarthquakeContextType = {\r\n    earthquakes,\r\n    loading,\r\n    error,\r\n    selectedEarthquake,\r\n    setSelectedEarthquake,\r\n    refreshData,\r\n    timeRange,\r\n    setTimeRange,\r\n    locationFilter,\r\n    setLocationFilter,\r\n    stats,\r\n    notifications,\r\n    setNotifications,\r\n  };\r\n\r\n  return (\r\n    <EarthquakeContext.Provider value={value}>\r\n      {children}\r\n    </EarthquakeContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}