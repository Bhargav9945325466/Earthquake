{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bm068\\\\Desktop\\\\Earth\\\\src\\\\context\\\\EarthquakeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EarthquakeContext = /*#__PURE__*/createContext(undefined);\nexport const useEarthquakes = () => {\n  _s();\n  const context = useContext(EarthquakeContext);\n  if (context === undefined) {\n    throw new Error('useEarthquakes must be used within an EarthquakeProvider');\n  }\n  return context;\n};\n_s(useEarthquakes, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const EarthquakeProvider = ({\n  children\n}) => {\n  _s2();\n  const [earthquakes, setEarthquakes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedEarthquake, setSelectedEarthquake] = useState(null);\n  const fetchEarthquakes = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson');\n      if (!response.ok) {\n        throw new Error('Failed to fetch earthquake data');\n      }\n      const data = await response.json();\n      setEarthquakes(data.features || []);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const refreshData = () => {\n    fetchEarthquakes();\n  };\n  useEffect(() => {\n    fetchEarthquakes();\n  }, []);\n  const value = {\n    earthquakes,\n    loading,\n    error,\n    selectedEarthquake,\n    setSelectedEarthquake,\n    refreshData\n  };\n  return /*#__PURE__*/_jsxDEV(EarthquakeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s2(EarthquakeProvider, \"RKY6sEqzWU4kwl1gNquyYSicVl0=\");\n_c = EarthquakeProvider;\nvar _c;\n$RefreshReg$(_c, \"EarthquakeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","EarthquakeContext","undefined","useEarthquakes","_s","context","Error","EarthquakeProvider","children","_s2","earthquakes","setEarthquakes","loading","setLoading","error","setError","selectedEarthquake","setSelectedEarthquake","fetchEarthquakes","response","fetch","ok","data","json","features","err","message","refreshData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/bm068/Desktop/Earth/src/context/EarthquakeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\nexport interface Earthquake {\r\n  id: string;\r\n  properties: {\r\n    mag: number;\r\n    place: string;\r\n    time: number;\r\n    title: string;\r\n    url: string;\r\n  };\r\n  geometry: {\r\n    coordinates: [number, number, number]; // [longitude, latitude, depth]\r\n  };\r\n}\r\n\r\ninterface EarthquakeContextType {\r\n  earthquakes: Earthquake[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  selectedEarthquake: Earthquake | null;\r\n  setSelectedEarthquake: (earthquake: Earthquake | null) => void;\r\n  refreshData: () => void;\r\n}\r\n\r\nconst EarthquakeContext = createContext<EarthquakeContextType | undefined>(undefined);\r\n\r\nexport const useEarthquakes = () => {\r\n  const context = useContext(EarthquakeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useEarthquakes must be used within an EarthquakeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface EarthquakeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const EarthquakeProvider: React.FC<EarthquakeProviderProps> = ({ children }) => {\r\n  const [earthquakes, setEarthquakes] = useState<Earthquake[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedEarthquake, setSelectedEarthquake] = useState<Earthquake | null>(null);\r\n\r\n  const fetchEarthquakes = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await fetch('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson');\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch earthquake data');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setEarthquakes(data.features || []);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'An error occurred');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const refreshData = () => {\r\n    fetchEarthquakes();\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEarthquakes();\r\n  }, []);\r\n\r\n  const value: EarthquakeContextType = {\r\n    earthquakes,\r\n    loading,\r\n    error,\r\n    selectedEarthquake,\r\n    setSelectedEarthquake,\r\n    refreshData,\r\n  };\r\n\r\n  return (\r\n    <EarthquakeContext.Provider value={value}>\r\n      {children}\r\n    </EarthquakeContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAyBzF,MAAMC,iBAAiB,gBAAGN,aAAa,CAAoCO,SAAS,CAAC;AAErF,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,OAAO,GAAGT,UAAU,CAACK,iBAAiB,CAAC;EAC7C,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,0DAA0D,CAAC;EAC7E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,cAAc;AAY3B,OAAO,MAAMI,kBAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACrF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAe,EAAE,CAAC;EAChE,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACmB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGpB,QAAQ,CAAoB,IAAI,CAAC;EAErF,MAAMqB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACFL,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,2EAA2E,CAAC;MAEzG,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIf,KAAK,CAAC,iCAAiC,CAAC;MACpD;MAEA,MAAMgB,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClCZ,cAAc,CAACW,IAAI,CAACE,QAAQ,IAAI,EAAE,CAAC;IACrC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZV,QAAQ,CAACU,GAAG,YAAYnB,KAAK,GAAGmB,GAAG,CAACC,OAAO,GAAG,mBAAmB,CAAC;IACpE,CAAC,SAAS;MACRb,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMc,WAAW,GAAGA,CAAA,KAAM;IACxBT,gBAAgB,CAAC,CAAC;EACpB,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACdoB,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,KAA4B,GAAG;IACnClB,WAAW;IACXE,OAAO;IACPE,KAAK;IACLE,kBAAkB;IAClBC,qBAAqB;IACrBU;EACF,CAAC;EAED,oBACE3B,OAAA,CAACC,iBAAiB,CAAC4B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApB,QAAA,EACtCA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEjC,CAAC;AAACxB,GAAA,CAhDWF,kBAAqD;AAAA2B,EAAA,GAArD3B,kBAAqD;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}